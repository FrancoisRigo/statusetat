// Code generated by counterfeiter. DO NOT EDIT.
package emitterfakes

import (
	"sync"

	emittera "github.com/olebedev/emitter"
)

type FakeEmitterInterface struct {
	EmitStub        func(string, ...interface{}) chan struct{}
	emitMutex       sync.RWMutex
	emitArgsForCall []struct {
		arg1 string
		arg2 []interface{}
	}
	emitReturns struct {
		result1 chan struct{}
	}
	emitReturnsOnCall map[int]struct {
		result1 chan struct{}
	}
	ListenersStub        func(string) []<-chan emittera.Event
	listenersMutex       sync.RWMutex
	listenersArgsForCall []struct {
		arg1 string
	}
	listenersReturns struct {
		result1 []<-chan emittera.Event
	}
	listenersReturnsOnCall map[int]struct {
		result1 []<-chan emittera.Event
	}
	OffStub        func(string, ...<-chan emittera.Event)
	offMutex       sync.RWMutex
	offArgsForCall []struct {
		arg1 string
		arg2 []<-chan emittera.Event
	}
	OnStub        func(string, ...func(*emittera.Event)) <-chan emittera.Event
	onMutex       sync.RWMutex
	onArgsForCall []struct {
		arg1 string
		arg2 []func(*emittera.Event)
	}
	onReturns struct {
		result1 <-chan emittera.Event
	}
	onReturnsOnCall map[int]struct {
		result1 <-chan emittera.Event
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEmitterInterface) Emit(arg1 string, arg2 ...interface{}) chan struct{} {
	fake.emitMutex.Lock()
	ret, specificReturn := fake.emitReturnsOnCall[len(fake.emitArgsForCall)]
	fake.emitArgsForCall = append(fake.emitArgsForCall, struct {
		arg1 string
		arg2 []interface{}
	}{arg1, arg2})
	fake.recordInvocation("Emit", []interface{}{arg1, arg2})
	fake.emitMutex.Unlock()
	if fake.EmitStub != nil {
		return fake.EmitStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.emitReturns
	return fakeReturns.result1
}

func (fake *FakeEmitterInterface) EmitCallCount() int {
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	return len(fake.emitArgsForCall)
}

func (fake *FakeEmitterInterface) EmitCalls(stub func(string, ...interface{}) chan struct{}) {
	fake.emitMutex.Lock()
	defer fake.emitMutex.Unlock()
	fake.EmitStub = stub
}

func (fake *FakeEmitterInterface) EmitArgsForCall(i int) (string, []interface{}) {
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	argsForCall := fake.emitArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEmitterInterface) EmitReturns(result1 chan struct{}) {
	fake.emitMutex.Lock()
	defer fake.emitMutex.Unlock()
	fake.EmitStub = nil
	fake.emitReturns = struct {
		result1 chan struct{}
	}{result1}
}

func (fake *FakeEmitterInterface) EmitReturnsOnCall(i int, result1 chan struct{}) {
	fake.emitMutex.Lock()
	defer fake.emitMutex.Unlock()
	fake.EmitStub = nil
	if fake.emitReturnsOnCall == nil {
		fake.emitReturnsOnCall = make(map[int]struct {
			result1 chan struct{}
		})
	}
	fake.emitReturnsOnCall[i] = struct {
		result1 chan struct{}
	}{result1}
}

func (fake *FakeEmitterInterface) Listeners(arg1 string) []<-chan emittera.Event {
	fake.listenersMutex.Lock()
	ret, specificReturn := fake.listenersReturnsOnCall[len(fake.listenersArgsForCall)]
	fake.listenersArgsForCall = append(fake.listenersArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Listeners", []interface{}{arg1})
	fake.listenersMutex.Unlock()
	if fake.ListenersStub != nil {
		return fake.ListenersStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listenersReturns
	return fakeReturns.result1
}

func (fake *FakeEmitterInterface) ListenersCallCount() int {
	fake.listenersMutex.RLock()
	defer fake.listenersMutex.RUnlock()
	return len(fake.listenersArgsForCall)
}

func (fake *FakeEmitterInterface) ListenersCalls(stub func(string) []<-chan emittera.Event) {
	fake.listenersMutex.Lock()
	defer fake.listenersMutex.Unlock()
	fake.ListenersStub = stub
}

func (fake *FakeEmitterInterface) ListenersArgsForCall(i int) string {
	fake.listenersMutex.RLock()
	defer fake.listenersMutex.RUnlock()
	argsForCall := fake.listenersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEmitterInterface) ListenersReturns(result1 []<-chan emittera.Event) {
	fake.listenersMutex.Lock()
	defer fake.listenersMutex.Unlock()
	fake.ListenersStub = nil
	fake.listenersReturns = struct {
		result1 []<-chan emittera.Event
	}{result1}
}

func (fake *FakeEmitterInterface) ListenersReturnsOnCall(i int, result1 []<-chan emittera.Event) {
	fake.listenersMutex.Lock()
	defer fake.listenersMutex.Unlock()
	fake.ListenersStub = nil
	if fake.listenersReturnsOnCall == nil {
		fake.listenersReturnsOnCall = make(map[int]struct {
			result1 []<-chan emittera.Event
		})
	}
	fake.listenersReturnsOnCall[i] = struct {
		result1 []<-chan emittera.Event
	}{result1}
}

func (fake *FakeEmitterInterface) Off(arg1 string, arg2 ...<-chan emittera.Event) {
	fake.offMutex.Lock()
	fake.offArgsForCall = append(fake.offArgsForCall, struct {
		arg1 string
		arg2 []<-chan emittera.Event
	}{arg1, arg2})
	fake.recordInvocation("Off", []interface{}{arg1, arg2})
	fake.offMutex.Unlock()
	if fake.OffStub != nil {
		fake.OffStub(arg1, arg2...)
	}
}

func (fake *FakeEmitterInterface) OffCallCount() int {
	fake.offMutex.RLock()
	defer fake.offMutex.RUnlock()
	return len(fake.offArgsForCall)
}

func (fake *FakeEmitterInterface) OffCalls(stub func(string, ...<-chan emittera.Event)) {
	fake.offMutex.Lock()
	defer fake.offMutex.Unlock()
	fake.OffStub = stub
}

func (fake *FakeEmitterInterface) OffArgsForCall(i int) (string, []<-chan emittera.Event) {
	fake.offMutex.RLock()
	defer fake.offMutex.RUnlock()
	argsForCall := fake.offArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEmitterInterface) On(arg1 string, arg2 ...func(*emittera.Event)) <-chan emittera.Event {
	fake.onMutex.Lock()
	ret, specificReturn := fake.onReturnsOnCall[len(fake.onArgsForCall)]
	fake.onArgsForCall = append(fake.onArgsForCall, struct {
		arg1 string
		arg2 []func(*emittera.Event)
	}{arg1, arg2})
	fake.recordInvocation("On", []interface{}{arg1, arg2})
	fake.onMutex.Unlock()
	if fake.OnStub != nil {
		return fake.OnStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.onReturns
	return fakeReturns.result1
}

func (fake *FakeEmitterInterface) OnCallCount() int {
	fake.onMutex.RLock()
	defer fake.onMutex.RUnlock()
	return len(fake.onArgsForCall)
}

func (fake *FakeEmitterInterface) OnCalls(stub func(string, ...func(*emittera.Event)) <-chan emittera.Event) {
	fake.onMutex.Lock()
	defer fake.onMutex.Unlock()
	fake.OnStub = stub
}

func (fake *FakeEmitterInterface) OnArgsForCall(i int) (string, []func(*emittera.Event)) {
	fake.onMutex.RLock()
	defer fake.onMutex.RUnlock()
	argsForCall := fake.onArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEmitterInterface) OnReturns(result1 <-chan emittera.Event) {
	fake.onMutex.Lock()
	defer fake.onMutex.Unlock()
	fake.OnStub = nil
	fake.onReturns = struct {
		result1 <-chan emittera.Event
	}{result1}
}

func (fake *FakeEmitterInterface) OnReturnsOnCall(i int, result1 <-chan emittera.Event) {
	fake.onMutex.Lock()
	defer fake.onMutex.Unlock()
	fake.OnStub = nil
	if fake.onReturnsOnCall == nil {
		fake.onReturnsOnCall = make(map[int]struct {
			result1 <-chan emittera.Event
		})
	}
	fake.onReturnsOnCall[i] = struct {
		result1 <-chan emittera.Event
	}{result1}
}

func (fake *FakeEmitterInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	fake.listenersMutex.RLock()
	defer fake.listenersMutex.RUnlock()
	fake.offMutex.RLock()
	defer fake.offMutex.RUnlock()
	fake.onMutex.RLock()
	defer fake.onMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEmitterInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
