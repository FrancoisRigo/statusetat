// Code generated by counterfeiter. DO NOT EDIT.
package notifiersfakes

import (
	"sync"

	"github.com/orange-cloudfoundry/statusetat/models"
	"github.com/orange-cloudfoundry/statusetat/notifiers"
)

type FakeNotifierSubscriber struct {
	NotifySubscriberStub        func(models.Incident, []string) error
	notifySubscriberMutex       sync.RWMutex
	notifySubscriberArgsForCall []struct {
		arg1 models.Incident
		arg2 []string
	}
	notifySubscriberReturns struct {
		result1 error
	}
	notifySubscriberReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNotifierSubscriber) NotifySubscriber(arg1 models.Incident, arg2 []string) error {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.notifySubscriberMutex.Lock()
	ret, specificReturn := fake.notifySubscriberReturnsOnCall[len(fake.notifySubscriberArgsForCall)]
	fake.notifySubscriberArgsForCall = append(fake.notifySubscriberArgsForCall, struct {
		arg1 models.Incident
		arg2 []string
	}{arg1, arg2Copy})
	fake.recordInvocation("NotifySubscriber", []interface{}{arg1, arg2Copy})
	fake.notifySubscriberMutex.Unlock()
	if fake.NotifySubscriberStub != nil {
		return fake.NotifySubscriberStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.notifySubscriberReturns
	return fakeReturns.result1
}

func (fake *FakeNotifierSubscriber) NotifySubscriberCallCount() int {
	fake.notifySubscriberMutex.RLock()
	defer fake.notifySubscriberMutex.RUnlock()
	return len(fake.notifySubscriberArgsForCall)
}

func (fake *FakeNotifierSubscriber) NotifySubscriberCalls(stub func(models.Incident, []string) error) {
	fake.notifySubscriberMutex.Lock()
	defer fake.notifySubscriberMutex.Unlock()
	fake.NotifySubscriberStub = stub
}

func (fake *FakeNotifierSubscriber) NotifySubscriberArgsForCall(i int) (models.Incident, []string) {
	fake.notifySubscriberMutex.RLock()
	defer fake.notifySubscriberMutex.RUnlock()
	argsForCall := fake.notifySubscriberArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNotifierSubscriber) NotifySubscriberReturns(result1 error) {
	fake.notifySubscriberMutex.Lock()
	defer fake.notifySubscriberMutex.Unlock()
	fake.NotifySubscriberStub = nil
	fake.notifySubscriberReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNotifierSubscriber) NotifySubscriberReturnsOnCall(i int, result1 error) {
	fake.notifySubscriberMutex.Lock()
	defer fake.notifySubscriberMutex.Unlock()
	fake.NotifySubscriberStub = nil
	if fake.notifySubscriberReturnsOnCall == nil {
		fake.notifySubscriberReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.notifySubscriberReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNotifierSubscriber) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.notifySubscriberMutex.RLock()
	defer fake.notifySubscriberMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNotifierSubscriber) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ notifiers.NotifierSubscriber = new(FakeNotifierSubscriber)
